REM BBP pi calculation like youtu.be/SPTzzSuBFlc
:
REM pi to 80 digits is
REM 31415926535897932384
REM 62643383279502884197
REM 16939937510582097494
REM 45923078164062862089
:
t0=TIME
:
REM bignums are a list of bytes, LSB first (lowest address)
REM one byte, the first byte, is the integer part
:
digits=600
big=((digits*5) DIV 12)+2 : REM can add 1 or 2 for guard digits
PRINT "Digits = ";digits
PRINT "   Big = ";big;" bytes"
:
REM pad bignums to ensure 4-byte comparison at the end to see zeros
pad=4
:
DIM SumP       big + pad: REM our bignum series accumulator
DIM NumeratorP big + pad: REM bignum numerator
:
base=0 : L%=base : REM our bignums can get shorter as we go
:
REM our numerator will be rescaled by 250/256 each digit
PROCset(NumeratorP, 4)
:
REM the denominator is a (two or three byte) integer
REM and K is the iteration variable
K%=0
F%=0:      REM increments by 4
T%=0:      REM increments by 10
OP%=FALSE: REM toggle +/- each iteration
M%=big-1 : REM leading zeros index for fast forward division
:
REM start producing digits!
PROCset(SumP, 4)
REPEAT
  :
  REM compute N/K and add/sub the quotient into S
  REM we adjust the denominator as needed
  D%=T%+1
  IF K% PROCdivaddsub(NOT(OP%))
  D%=(T%+3)*4
  PROCdivaddsub(OP%)
  D%=(T%+5)*64
  PROCdivaddsub(OP%)
  D%=(T%+7)*64
  PROCdivaddsub(OP%)
  D%=(T%+9)*256
  PROCdivaddsub(NOT(OP%))
  D%=(F%+1)*8
  PROCdivaddsub(OP%)
  D%=(F%+3)*256
  PROCdivaddsub(OP%)
  :
  REM S is updated, now take three digits
  IF K% PRINT;RIGHT$("000"+STR$(SumP!(big-1)),3);:ELSEPRINT;SumP!(big-1);
  PROCmask(SumP) : REM remove those digits from S
  PROCx1000(SumP)
  :
  REM now re-scale the numerator
  PROCrescale(NumeratorP)
  OP%=NOT(OP%)
  IF NumeratorP?M%=0 M%=M%-1
  base=base+3*106/256:L%=base
  F%=F%+4
  T%=T%+10
  K%=K%+3
UNTIL K%>digits
:
PRINT '(TIME-t0) DIV 100"s"
END
:
REM --------------------------------------------------
:
DEF PROCset(BignumP, C)
  REM C is a tiny integer - one byte
  REM integer end of our bignum is at the far end
  FOR I%=L% TO big-1
    BignumP?I%=0
  NEXT
  BignumP?(big-1)=C
ENDPROC
:
REM --------------------------------------------------
:
REM Globals:
REM   NumeratorP, SumP are bignums
REM   SumP is a bignum to add or subtract into
REM   D% is an integer, the number to divide by
REM   M% is the MSB index into NumeratorP
REM   L% is the LSB index into NumeratorP
REM Parameters:
REM   C% is TRUE for add, FALSE for subtract
REM Locals:
REM   I% byte loop counter (M% to L%)
REM   J% bit loop counter (0 TO 7)
REM   T% is a 4-byte temporary numerator
REM   B% is the byte being accumulated
:
REM --------------------------------------------------
:
DEF PROCdivaddsub(C%)
  LOCAL T%
  T%=0
  FOR I%=M% TO L% STEP -1
    T%=T%*256+NumeratorP?I%
    B%=0
    D%=D%*256
    FOR J%=0 TO 7
      B%=B%*2
      D%=D% DIV 2
      IF T%>=D% T%=T%-D%:B%=B%+1
    NEXT
    IF B%=0 NEXT:ENDPROC
    S%=SumP!I%
    IF C% SumP!I%=S%+B%:ELSE SumP!I%=S%-B%
    IF SGNS%<>SGN(SumP!I%) STOP
  NEXT
ENDPROC
:
REM --------------------------------------------------
:
DEF PROCrescale(BignumP)
  REM we multiply by 250/256 which is less than one
  PROCx250(BignumP)
  FOR I%=L% TO big-1
    BignumP?I%=BignumP?(I%+1)
  NEXT
  BignumP?big=0
ENDPROC
:
REM --------------------------------------------------
:
DEF FNextract(BignumP)
  REM a sanity check is that this is 9 at most
  REM assumes bignum has 1 byte before the binary point
  =(BignumP?(big-1)) : REM decimal digit, just the top byte
:
REM --------------------------------------------------
:
DEF PROCmask(SumP)
  REM set integer part of the bignum to zero
  REM assumes bignum has 1 byte before the binary point
  I%=big-1
  SumP?I%=0
  SumP?(I%+1)=0:REM mask extra byte beyond MSB
ENDPROC
:
REM --------------------------------------------------
:
DEF PROCx250(BignumP)
  REM bignum multiply by small number
  REM two byte result from each digit demands a carry
  LOCAL carry, temp
  carry=0
  FOR I%=L% TO big: REM extra element allows one byte of carry to propagate
    temp=(BignumP?I%)*250 + carry
    BignumP?I% = temp AND 255
    carry = temp DIV 256
  NEXT
  IF carry>0 STOP
ENDPROC
:
REM --------------------------------------------------
:
DEF PROCx1000(BignumP)
  REM bignum multiply by small number
  REM two byte result from each digit demands a carry
  LOCAL carry, temp
  carry=0
  FOR I%=L% TO big: REM extra element allows one byte of carry to propagate
    temp=(BignumP?I%)*1000 + carry
    BignumP?I% = temp AND 255
    carry = temp DIV 256
  NEXT
  IF carry>0 STOP
ENDPROC

REM INPUT "Digits ",digits
:
C%=&6000
HIMEM=C%
LOMEM=C%-&200
code=C%
:
*LOAD SPIGMC
:
max_tests%=10
DIM digits(max_tests%), timings(max_tests%)
num_tests%=0
REPEAT
READ d
PROCtest(d)
UNTIL d=0
:
PRINT '"Summary for ";$(code+3)
FOR test%=0 TO num_tests%-1
@%=&90A
PRINT digits(test%);
@%=&2020A
PRINT timings(test%);"s"
NEXT
END
:
DATA 80, 200, 400, 800, 100, 1000, 3000, 0
:
REM --------------------------------------------------
:
DEF PROCtest(digits)
:
IF digits=0 ENDPROC
:
big=((digits*5) DIV 12)+2 : REM can add 1 or 2 for guard digits
@%=&90A
PRINT $(code+3)
PRINT "Digits = ";digits
PRINT "   Big = ";big;" bytes"
:
REM pad bignums to ensure 4-byte comparison at the end to see zeros
pad=4
:
REM Manually allocate memory so we can re-allocate
IF (LOMEM-TOP-pad) < (big+pad)*2 PRINT "Not enough RAM for ";digits;" digits":END
mem=TOP+pad
SumP       = mem:mem=mem+big+pad
NumeratorP = mem:mem=mem+big+pad
:
!&70=NumeratorP
!&72=SumP
!&74=big
!&76=digits
:
PROCset(NumeratorP, 4)
PROCset(SumP, 4)
:
t0=TIME
CALL code
t1=TIME
@%=&2020A
PRINT '(t1-t0) / 100"s"
digits(num_tests%)=digits
timings(num_tests%)=(t1-t0)/100
num_tests%=num_tests%+1
ENDPROC
:
REM --------------------------------------------------
:
DEF PROCset(BignumP, C)
  REM C is a tiny integer - one byte
  REM integer end of our bignum is at the far end
  FOR I%=L% TO big-1
    BignumP?I%=0
  NEXT
  BignumP?(big-1)=C
  BignumP!big=0
ENDPROC
